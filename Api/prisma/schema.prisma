generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum AdminRole {
  OWNER
  MANAGER
  STAFF
}

enum PickerStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum MachineStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  RETIRED
}

enum RunStatus {
  DRAFT
  SCHEDULED
  IN_PROGRESS
  READY
  COMPLETED
  CANCELLED
  HISTORICAL
}

enum RunItemStatus {
  PENDING
  PICKED
  SKIPPED
}

model Company {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  locations Location[]
  machines  VendingMachine[]
  admins    Admin[]
  pickers   CompanyPicker[]
  items     Item[]
  runs      Run[]
}

model Admin {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String
  firstName   String
  lastName    String
  role        AdminRole @default(MANAGER)
  phone       String?
  companyId   String
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  runsCreated Run[]     @relation("RunCreatedBy")
}

model Picker {
  id           String          @id @default(cuid())
  firstName    String
  lastName     String
  phone        String?
  employeeCode String?
  runs         Run[]           @relation("RunAssignedPicker")
  companies    CompanyPicker[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model Location {
  id           String           @id @default(cuid())
  name         String
  code         String?          @unique
  addressLine1 String?
  addressLine2 String?
  city         String?
  state        String?
  postalCode   String?
  country      String?
  latitude     Decimal?         @db.Decimal(10, 7)
  longitude    Decimal?         @db.Decimal(10, 7)
  notes        String?
  companyId    String
  company      Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  machines     VendingMachine[]
  runs         Run[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model VendingMachine {
  id           String        @id @default(cuid())
  externalId   String?       @unique
  label        String
  status       MachineStatus @default(ACTIVE)
  serialNumber String?
  timezone     String?
  notes        String?
  companyId    String
  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  locationId   String?
  location     Location?     @relation(fields: [locationId], references: [id], onDelete: SetNull)
  coils        Coil[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([companyId])
  @@index([locationId])
}

model Item {
  id        String   @id @default(cuid())
  sku       String?  @unique
  name      String
  category  String?
  unitSize  String?
  notes     String?
  coils     Coil[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Company   Company? @relation(fields: [companyId], references: [id])
  companyId String?

  @@index([name])
}

model Coil {
  id               String         @id @default(cuid())
  machineId        String
  machine          VendingMachine @relation(fields: [machineId], references: [id], onDelete: Cascade)
  itemId           String?
  item             Item?          @relation(fields: [itemId], references: [id], onDelete: SetNull)
  slotLabel        String
  capacity         Int
  parLevel         Int?
  restockThreshold Int?
  notes            String?
  itemForCoils     ItemForCoil[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@unique([machineId, slotLabel])
  @@index([itemId])
}

model Run {
  id               String        @id @default(cuid())
  code             String?       @unique
  scheduledFor     DateTime?
  startedAt        DateTime?
  completedAt      DateTime?
  status           RunStatus     @default(DRAFT)
  notes            String?
  companyId        String
  company          Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  pickerId         String?
  picker           Picker?       @relation("RunAssignedPicker", fields: [pickerId], references: [id], onDelete: SetNull)
  createdByAdminId String?
  createdBy        Admin?        @relation("RunCreatedBy", fields: [createdByAdminId], references: [id], onDelete: SetNull)
  itemForCoils     ItemForCoil[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  Location         Location?     @relation(fields: [locationId], references: [id])
  locationId       String?

  @@index([companyId])
  @@index([pickerId])
}

model ItemForCoil {
  id             String        @id @default(cuid())
  runId          String
  coilId         String
  quantityNeeded Int
  quantityPicked Int           @default(0)
  status         RunItemStatus @default(PENDING)
  notes          String?
  run            Run           @relation(fields: [runId], references: [id], onDelete: Cascade)
  coil           Coil          @relation(fields: [coilId], references: [id], onDelete: Cascade)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@unique([runId, coilId])
  @@index([coilId])
}

model CompanyPicker {
  companyId String
  pickerId  String
  role      String?
  status    PickerStatus @default(ACTIVE)
  joinedAt  DateTime     @default(now())

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  picker  Picker  @relation(fields: [pickerId], references: [id], onDelete: Cascade)

  @@id([companyId, pickerId])
  @@index([pickerId])
}
